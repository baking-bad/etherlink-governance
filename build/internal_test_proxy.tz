{ parameter unit ;
  storage unit ;
  code { CDR ; NIL operation ; PAIR } ;
  view "get_kernel_upgrade_payload"
       (pair (bytes %kernel_root_hash) (timestamp %activation_timestamp))
       bytes
       { LAMBDA nat bytes { BYTES } ;
         SWAP ;
         CAR ;
         UNPAIR ;
         PUSH nat 33 ;
         DUP 2 ;
         SIZE ;
         COMPARE ;
         EQ ;
         IF {} { PUSH string "INCORRECT_KERNEL_ROOT_HASH_SIZE" ; FAILWITH } ;
         PUSH timestamp 0 ;
         DIG 2 ;
         SUB ;
         ABS ;
         DUP 3 ;
         SWAP ;
         EXEC ;
         PUSH bytes 0x ;
         PUSH int 1 ;
         PUSH int 1 ;
         DUP 4 ;
         SIZE ;
         SUB ;
         PUSH int 0 ;
         DUP 2 ;
         DUP 2 ;
         COMPARE ;
         LE ;
         LOOP { DUP ;
                DUG 3 ;
                DIP 3
                    { ISNAT ;
                      IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                      SWAP ;
                      DUP 3 ;
                      PUSH nat 1 ;
                      DIG 3 ;
                      SLICE ;
                      IF_NONE { PUSH string "SLICE" ; FAILWITH } {} ;
                      CONCAT } ;
                DUP 3 ;
                ADD ;
                DUP 2 ;
                DUP 2 ;
                COMPARE ;
                LE } ;
         DROP 3 ;
         SWAP ;
         DROP ;
         DUP ;
         SIZE ;
         INT ;
         PUSH int 1 ;
         PUSH int 1 ;
         PUSH nat 8 ;
         SUB ;
         DIG 2 ;
         DUP 2 ;
         DUP 2 ;
         COMPARE ;
         LE ;
         LOOP { DUP ;
                DUG 3 ;
                DIP 3 { DROP ; PUSH bytes 0x00 ; SWAP ; CONCAT } ;
                DUP 3 ;
                ADD ;
                DUP 2 ;
                DUP 2 ;
                COMPARE ;
                LE } ;
         DROP 3 ;
         PUSH bytes 0x ;
         NIL bytes ;
         DIG 2 ;
         CONS ;
         DIG 2 ;
         CONS ;
         ITER { SWAP ;
                DUP 2 ;
                SIZE ;
                PUSH nat 55 ;
                DUP 2 ;
                COMPARE ;
                LE ;
                IF { PUSH nat 128 ; ADD ; DUP 4 ; SWAP ; EXEC }
                   { DUP 4 ;
                     SWAP ;
                     EXEC ;
                     NIL bytes ;
                     DUP 2 ;
                     CONS ;
                     PUSH nat 183 ;
                     DIG 2 ;
                     SIZE ;
                     ADD ;
                     DUP 5 ;
                     SWAP ;
                     EXEC ;
                     CONS ;
                     CONCAT } ;
                DIG 2 ;
                SWAP ;
                CONCAT ;
                SWAP ;
                CONCAT } ;
         DUP ;
         SIZE ;
         PUSH nat 55 ;
         DUP 2 ;
         COMPARE ;
         LE ;
         IF { PUSH nat 192 ; ADD ; DIG 2 ; SWAP ; EXEC }
            { DUP 3 ;
              SWAP ;
              EXEC ;
              NIL bytes ;
              DUP 2 ;
              CONS ;
              PUSH nat 247 ;
              DIG 2 ;
              SIZE ;
              ADD ;
              DIG 3 ;
              SWAP ;
              EXEC ;
              CONS ;
              CONCAT } ;
         CONCAT } ;
  view "get_sequencer_upgrade_payload"
       (pair (string %public_key) (bytes %l2_address) (timestamp %activation_timestamp))
       bytes
       { PUSH string "INCORRECT_SEQUENCER_UPGRADE_PAYLOAD_SIZE" ;
         LAMBDA nat bytes { BYTES } ;
         DIG 2 ;
         CAR ;
         UNPAIR 3 ;
         DUP ;
         SIZE ;
         PUSH nat 55 ;
         DUP 2 ;
         COMPARE ;
         EQ ;
         PUSH nat 54 ;
         DIG 2 ;
         COMPARE ;
         EQ ;
         OR ;
         IF {} { DUP 5 ; FAILWITH } ;
         PUSH nat 20 ;
         DUP 3 ;
         SIZE ;
         COMPARE ;
         EQ ;
         IF { DIG 4 ; DROP } { DIG 4 ; FAILWITH } ;
         PACK ;
         DUP ;
         PUSH nat 4 ;
         PUSH nat 2 ;
         SLICE ;
         IF_NONE { PUSH string "SLICE" ; FAILWITH } {} ;
         NAT ;
         PUSH timestamp 0 ;
         DIG 4 ;
         SUB ;
         ABS ;
         DUP 5 ;
         SWAP ;
         EXEC ;
         PUSH bytes 0x ;
         PUSH int 1 ;
         PUSH int 1 ;
         DUP 4 ;
         SIZE ;
         SUB ;
         PUSH int 0 ;
         DUP 2 ;
         DUP 2 ;
         COMPARE ;
         LE ;
         LOOP { DUP ;
                DUG 3 ;
                DIP 3
                    { ISNAT ;
                      IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
                      SWAP ;
                      DUP 3 ;
                      PUSH nat 1 ;
                      DIG 3 ;
                      SLICE ;
                      IF_NONE { PUSH string "SLICE" ; FAILWITH } {} ;
                      CONCAT } ;
                DUP 3 ;
                ADD ;
                DUP 2 ;
                DUP 2 ;
                COMPARE ;
                LE } ;
         DROP 3 ;
         SWAP ;
         DROP ;
         DUP ;
         SIZE ;
         INT ;
         PUSH int 1 ;
         PUSH int 1 ;
         PUSH nat 8 ;
         SUB ;
         DIG 2 ;
         DUP 2 ;
         DUP 2 ;
         COMPARE ;
         LE ;
         LOOP { DUP ;
                DUG 3 ;
                DIP 3 { DROP ; PUSH bytes 0x00 ; SWAP ; CONCAT } ;
                DUP 3 ;
                ADD ;
                DUP 2 ;
                DUP 2 ;
                COMPARE ;
                LE } ;
         DROP 3 ;
         PUSH bytes 0x ;
         NIL bytes ;
         DIG 2 ;
         CONS ;
         DIG 4 ;
         CONS ;
         DIG 3 ;
         DIG 3 ;
         PUSH nat 6 ;
         SLICE ;
         IF_NONE { PUSH string "SLICE" ; FAILWITH } {} ;
         CONS ;
         ITER { SWAP ;
                DUP 2 ;
                SIZE ;
                PUSH nat 55 ;
                DUP 2 ;
                COMPARE ;
                LE ;
                IF { PUSH nat 128 ; ADD ; DUP 4 ; SWAP ; EXEC }
                   { DUP 4 ;
                     SWAP ;
                     EXEC ;
                     NIL bytes ;
                     DUP 2 ;
                     CONS ;
                     PUSH nat 183 ;
                     DIG 2 ;
                     SIZE ;
                     ADD ;
                     DUP 5 ;
                     SWAP ;
                     EXEC ;
                     CONS ;
                     CONCAT } ;
                DIG 2 ;
                SWAP ;
                CONCAT ;
                SWAP ;
                CONCAT } ;
         DUP ;
         SIZE ;
         PUSH nat 55 ;
         DUP 2 ;
         COMPARE ;
         LE ;
         IF { PUSH nat 192 ; ADD ; DIG 2 ; SWAP ; EXEC }
            { DUP 3 ;
              SWAP ;
              EXEC ;
              NIL bytes ;
              DUP 2 ;
              CONS ;
              PUSH nat 247 ;
              DIG 2 ;
              SIZE ;
              ADD ;
              DIG 3 ;
              SWAP ;
              EXEC ;
              CONS ;
              CONCAT } ;
         CONCAT } }

